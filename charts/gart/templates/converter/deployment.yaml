{{- $kafka_service_name := .Values.kafka.fullnameOverride }}
{{- $kafka_service_port := int .Values.kafka.service.ports.client }}
{{- $kafka_service := printf "%s:%d" $kafka_service_name $kafka_service_port }}

{{- $etcd_service_name := .Values.etcd.fullnameOverride }}
{{- $etcd_service_port := int .Values.etcd.containerPorts.client }}
{{- $etcd_service := printf "%s:%d" $etcd_service_name $etcd_service_port }}

{{- $debezium_service_name := include "gart.debezium.fullname" . }}
{{- $debezium_service_port := int .Values.debezium.containerPort }}
{{- $debezium_service := printf "%s:%d" $debezium_service_name $debezium_service_port }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gart.converter.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.converter.replicaCount }}
  selector:
    matchLabels:
      app: converter
  template:
    metadata:
      labels:
        app: converter
    spec:
      containers:
      - name: converter
        image: {{ include "gart.converter.image" . }}
        imagePullPolicy: {{ .Values.converter.image.pullPolicy | quote }}
        command: ["/bin/bash", "-c"]
        args:
        - |
          cd /workspace/gart/build &&
          until nc -z {{ $kafka_service_name }} {{ $kafka_service_port }}; do echo waiting for kafka; sleep 5; done &&
          until nc -z {{ $etcd_service_name }} {{ $etcd_service_port }}; do echo waiting for etcd; sleep 5; done &&
          echo "Applying Debezium connector configuration..." &&
          export  PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python &&
          CONFIG=$(/workspace/gart/scripts/update_debezium_config.py {{ $etcd_service }} {{ .Values.dataconfig.etcdPrefix }} {{ .Values.dataconfig.dbName }} {{ .Values.dataconfig.dbType }}) &&
          while : ; do
            HTTP_STATUS=$(curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" \
              --data "$CONFIG" \
              http://{{ $debezium_service }}/connectors/ \
              -o /dev/null -w '%{http_code}')
            
            if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 201 ]; then
              echo "Debezium service is ready."
              break
            else
              echo "Debezium service not ready, waiting... Status: $HTTP_STATUS"
              sleep 5
            fi
          done &&
          ./gart \
          --db-host ${DB_HOST} \
          --db-port ${DB_PORT} \
          --db-name ${DB_NAME} \
          --db-type ${DB_TYPE} \
          --db-user ${DB_USER} \
          --db-password ${DB_PASSWORD} \
          --v6d-sock ${V6D_SOCKET} \
          --v6d-size ${V6D_SIZE} \
          --etcd-endpoint {{ $etcd_service }} \
          --etcd-prefix ${ETCD_PREFIX} \
          --kafka-server {{ $kafka_service }} \
          --subgraph-num ${SUBGRAPH_NUM} \
          --enable-bulkload ${ENABLE_BULKLOAD} \
          --rg-from-etcd true \
          --k8s-mode true \
          --role converter &&
          sleep infinity
        envFrom:
        - configMapRef:
            name: {{ include "gart.configmapName" . }}
        volumeMounts:
        - name: config-volume
          mountPath: "/etc/debezium-connector-config"
      volumes:
      - name: config-volume
        configMap:
          name: {{ include "gart.debezium.configmapName" . }}
          
        
