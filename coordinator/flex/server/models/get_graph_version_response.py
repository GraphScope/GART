from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from flex.server.models.base_model import Model
from flex.server import util


class GetGraphVersionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_time=None, end_time=None, version_id=None, num_vertices=None, num_edges=None):  # noqa: E501
        """GetGraphVersionResponse - a model defined in OpenAPI

        :param begin_time: The begin_time of this GetGraphVersionResponse.  # noqa: E501
        :type begin_time: str
        :param end_time: The end_time of this GetGraphVersionResponse.  # noqa: E501
        :type end_time: str
        :param version_id: The version_id of this GetGraphVersionResponse.  # noqa: E501
        :type version_id: str
        :param num_vertices: The num_vertices of this GetGraphVersionResponse.  # noqa: E501
        :type num_vertices: str
        :param num_edges: The num_edges of this GetGraphVersionResponse.  # noqa: E501
        :type num_edges: str
        """
        self.openapi_types = {
            'begin_time': str,
            'end_time': str,
            'version_id': str,
            'num_vertices': str,
            'num_edges': str
        }

        self.attribute_map = {
            'begin_time': 'begin_time',
            'end_time': 'end_time',
            'version_id': 'version_id',
            'num_vertices': 'num_vertices',
            'num_edges': 'num_edges'
        }

        self._begin_time = begin_time
        self._end_time = end_time
        self._version_id = version_id
        self._num_vertices = num_vertices
        self._num_edges = num_edges

    @classmethod
    def from_dict(cls, dikt) -> 'GetGraphVersionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetGraphVersionResponse of this GetGraphVersionResponse.  # noqa: E501
        :rtype: GetGraphVersionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_time(self) -> str:
        """Gets the begin_time of this GetGraphVersionResponse.


        :return: The begin_time of this GetGraphVersionResponse.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time: str):
        """Sets the begin_time of this GetGraphVersionResponse.


        :param begin_time: The begin_time of this GetGraphVersionResponse.
        :type begin_time: str
        """
        if begin_time is None:
            raise ValueError("Invalid value for `begin_time`, must not be `None`")  # noqa: E501

        self._begin_time = begin_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this GetGraphVersionResponse.


        :return: The end_time of this GetGraphVersionResponse.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this GetGraphVersionResponse.


        :param end_time: The end_time of this GetGraphVersionResponse.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def version_id(self) -> str:
        """Gets the version_id of this GetGraphVersionResponse.


        :return: The version_id of this GetGraphVersionResponse.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: str):
        """Sets the version_id of this GetGraphVersionResponse.


        :param version_id: The version_id of this GetGraphVersionResponse.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    @property
    def num_vertices(self) -> str:
        """Gets the num_vertices of this GetGraphVersionResponse.


        :return: The num_vertices of this GetGraphVersionResponse.
        :rtype: str
        """
        return self._num_vertices

    @num_vertices.setter
    def num_vertices(self, num_vertices: str):
        """Sets the num_vertices of this GetGraphVersionResponse.


        :param num_vertices: The num_vertices of this GetGraphVersionResponse.
        :type num_vertices: str
        """
        if num_vertices is None:
            raise ValueError("Invalid value for `num_vertices`, must not be `None`")  # noqa: E501

        self._num_vertices = num_vertices

    @property
    def num_edges(self) -> str:
        """Gets the num_edges of this GetGraphVersionResponse.


        :return: The num_edges of this GetGraphVersionResponse.
        :rtype: str
        """
        return self._num_edges

    @num_edges.setter
    def num_edges(self, num_edges: str):
        """Sets the num_edges of this GetGraphVersionResponse.


        :param num_edges: The num_edges of this GetGraphVersionResponse.
        :type num_edges: str
        """
        if num_edges is None:
            raise ValueError("Invalid value for `num_edges`, must not be `None`")  # noqa: E501

        self._num_edges = num_edges
