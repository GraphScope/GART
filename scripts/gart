#!/bin/bash

KAFKA_HOME=$KAFKA_HOME
MAXWELL_HOME=$MAXWELL_HOME

####################### Parse Arguments #######################
VALID_ARGS=$(getopt -o d:b:u:p:r:t:e:h? --long db-host:,db-name:,db-port:,user:,password:,rgmapping-file:,table-schema-file:,v6d-sock:,v6d-size:,etcd-endpoint:,server-num:,help -- "$@")
if [[ $? -ne 0 ]]; then
    exit 1;
fi

db_host="127.0.0.1"
db_port=3306
db_name="my_maxwell_01"
user=
password=
rgmapping_file="schema/rgmapping-ldbc.json"
table_schema_file="schema/db_schema.json"
v6d_sock="/var/run/vineyard.sock"
v6d_size="250G"
etcd_endpoint="http://127.0.0.1:2379"
server_num=1

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -d | --db-host)
        db_host=$2
        shift 2
        ;;
         --db-port)
        db_port=$2
        shift 2
        ;;
    -b | --db-name)
        db_name=$2
        shift 2
        ;;
    -u | --user)
        user=$2
        shift 2
        ;;
    -p | --password)
        password=$2
        shift 2
        ;;
    -r | --rgmapping-file)
        rgmapping_file=$2
        shift 2
        ;;
    -t | --table-schema-file)
        table_schema_file=$2
        shift 2
        ;;
         --v6d-sock)
        v6d_sock=$2
        shift 2
        ;;
         --v6d-size)
        v6d_size=$2
        shift 2
        ;;
    -e | --etcd-endpoint)
        etcd_endpoint=$2
        shift 2
        ;;
         --server-num)
        server_num=$2
        shift 2
        ;;
    -h | --help | ?)
        echo "Usage: $0 [options]"
        echo "  -d, --db-host:           database host (default: 127.0.0.1)"
        echo "      --db-port:           database port (default: 3306)"
        echo "  -b, --db-name:           database name (default: my_maxwell_01)"
        echo "  -u, --user:              database user"
        echo "  -p, --password:          database password"
        echo "  -r, --rgmapping-file:    rgmapping file path (default: schema/rgmapping-ldbc.json)"
        echo "  -t, --table-schema-file: table schema file path (default: schema/db_schema.json)"
        echo "      --v6d-sock:          vineyard socket path (default: /var/run/vineyard.sock)"
        echo "      --v6d-size:          vineyard size (default: 110G)"
        echo "  -e, --etcd-endpoint:     etcd endpoint (default: http://127.0.0.1:2379)"
        echo "      --server-num:        number of servers (i.e., number of sub graphs) (default: 1)"
        echo "  -h, --help:              help"
        exit 0
        ;;
    --)
        shift;
        break
        ;;
  esac
done

echo "db-host: $db_host"
echo "db-port: $db_port"
echo "db-name: $db_name"
echo "user: $user"
echo "password: $password"
echo "rgmapping-file: $rgmapping_file"
echo "table-schema-file: $table_schema_file"
echo "v6d-sock: $v6d_sock"
echo "v6d-size: $v6d_size"
echo "etcd-endpoint: $etcd_endpoint"
echo "server-num: $server_num"

unset=false
if [ -n "$KAFKA_HOME" ]; then
    echo "KAFKA_HOME is $KAFKA_HOME"
else
    echo "KAFKA_HOME is empty, please set the environment variable KAFKA_HOME"
    unset=true
fi

if [ -n "$MAXWELL_HOME" ]; then
    echo "MAXWELL_HOME is $MAXWELL_HOME"
else
    echo "MAXWELL_HOME is empty, please set the environment variable MAXWELL_HOME"
    unset=true
fi

if [ "$unset" = true ]; then
    exit 1
fi

KAFKA_BIN=$KAFKA_HOME/bin
KAFKA_CONFIG=$KAFKA_HOME/config
KAFKA_LOG=$KAFKA_HOME/logs/kafkaServer.out

####################### Extract Schema #######################
echo "Start extracting schema"
./scripts/extract_table_schema.py \
    --host $db_host --port $db_port --db $db_name \
    --user $user --password $password \
    --rgmapping_file $rgmapping_file --output $table_schema_file

####################### Vineyard #######################
if [ ! -e "$v6d_sock" ] || [ ! -S "$v6d_sock" ]; then
    echo "$v6d_sock does not exist, start to launch vineyardd"
    vineyardd --socket $v6d_sock --size $v6d_size --etcd_endpoint $etcd_endpoint  --norpc &
fi

####################### Capturer: Zookeeper and Kafka #######################
echo "Start Zookeeper and Kafka"
$KAFKA_BIN/zookeeper-server-start.sh -daemon $KAFKA_CONFIG/zookeeper.properties

sleep 3

$KAFKA_BIN/kafka-server-start.sh -daemon $KAFKA_CONFIG/server.properties

sleep 3

# check Kafka failure
for i in {1..5}
do
    if grep -q "ERROR" "$KAFKA_LOG"; then
        echo "File $KAFKA_LOG contains ERROR, waiting for cleanning"
        sleep 10

        $KAFKA_BIN/zookeeper-server-start.sh -daemon $KAFKA_CONFIG/zookeeper.properties
        sleep 3
        $KAFKA_BIN/kafka-server-start.sh -daemon $KAFKA_CONFIG/server.properties
        sleep 3
    else
        break
    fi
    if [ $i -eq 5 ]; then
        echo "Kafka: Reached max attempts, ERROR found"
        ./stop-gart --kill-v6d-sock $v6d_sock
        exit 1
    fi
done

echo "Clean topics"
$KAFKA_BIN/kafka-topics.sh --delete --topic binlog --bootstrap-server 127.0.0.1:9092 > /dev/null 2>&1
$KAFKA_BIN/kafka-topics.sh --delete --topic unified_log --bootstrap-server 127.0.0.1:9092 > /dev/null 2>&1

#TODO: hard code: replication-factor

echo "Create topic: binlog"
$KAFKA_BIN/kafka-topics.sh --create --topic binlog --bootstrap-server 127.0.0.1:9092 --partitions 1 --replication-factor 1 > /dev/null 2>&1

echo "Create topics: unified_log"
$KAFKA_BIN/kafka-topics.sh --create --topic unified_log --bootstrap-server 127.0.0.1:9092 --partitions 1 --replication-factor 1 > /dev/null 2>&1

sleep 2

$KAFKA_BIN/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list


####################### Capturer: Maxwell #######################
MAXWELL_BIN=$MAXWELL_HOME/bin

echo "Start Maxwell"
$MAXWELL_BIN/maxwell --host=$db_host --user=$user --password=$password --producer=kafka --kafka.bootstrap.servers=127.0.0.1:9092 --kafka_topic=binlog  > /dev/null 2>&1 &

sleep 3

####################### Converter #######################
CONVENTER_HOME=./converter

echo "Start Converter"
$CONVENTER_HOME/binlog_convert --rg_mapping_file_path $rgmapping_file \
    --numbers_of_subgraphs $server_num &

sleep 2

conventer_pid=$!
echo "conventer pid: $conventer_pid"

####################### Writer (VEGITO) #######################

WRITER_HOME=./vegito

echo "Start Writer"

#TODO: Fix hard code, simulate in a single machine. Use a host file to allocate

for ((i=0; i<$server_num; i++)); do
    $WRITER_HOME/vegito --v6d_ipc_socket $v6d_sock \
       --etcd_endpoint $etcd_endpoint \
       --schema_file_path $rgmapping_file \
       --table_schema_file_path $table_schema_file \
       --server_num $server_num --server_id $i &
done
